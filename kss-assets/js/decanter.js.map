{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./core/src/js/components/components.js","webpack:///./core/src/js/components/main-nav/Nav.js","webpack:///./core/src/js/components/main-nav/NavItem.js","webpack:///./core/src/js/components/main-nav/globals.js","webpack:///./core/src/js/components/main-nav/main-nav.js","webpack:///./core/src/js/core/core.js","webpack:///./core/src/js/decanter.js","webpack:///./core/src/js/utilities/keyboard.js"],"names":["Nav","elem","topNav","getTopNav","NavItem","item","toggle","querySelector","tagName","toggleText","innerText","items","querySelectorAll","forEach","push","addEventListener","nav","isSubNav","isExpanded","getAttribute","value","setExpanded","setAttribute","getComputedStyle","display","length","getFirstItem","link","getLastItem","currentItem","currentIndex","lastIndex","indexOf","getFirstLink","focus","getLastLink","Number","isInteger","focusOnFirst","closeAllMobileNavs","focusOn","event","window","handler","type","charAt","toUpperCase","slice","target","srcElement","preventDefault","stopPropagation","closeMobileNav","openMobileNav","theKey","key","keyCode","isEsc","isTopNav","isDesktopNav","closeSubNav","isEnter","isSpace","subNav","isSubNavTrigger","theSubNavs","lastElementChild","closeAllSubNavs","classList","add","focusOnTrigger","remove","isSubNavItem","openSubNav","location","isDownArrow","isUpArrow","isLeftArrow","parent","getParentNav","isRightArrow","isHome","isEnd","isTab","shifted","shiftKey","isLastItem","isFirstItem","theNavs","theNav","document","navClass","navs","firstZindex","index","zIndex","style","matches","NodeList","prototype","Array"],"mappings":"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","file":"decanter.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./core/src/js/decanter.js\");\n","import * as DecanterMainNav from './main-nav/main-nav.js';\n","import { closeAllMobileNavs } from './globals';\nimport * as UtilKeyboard from \"../../utilities/keyboard\";\nimport NavItem from './NavItem';\n\n/**\n * Represent a navigation menu. May be the top nav or a subnav.\n *\n * @prop {HTMLElement|NavItem} elem       - The element that is the nav. May\n *                                          be a main nav (<nav>) or a subnav\n *                                          (NavItem).\n * @prop {Nav}                 topNav     - The instance of Nav that models\n *                                          the top nav. If this is the top\n *                                          nav, topNav === this.\n * @prop {HTMLButtonElement}   toggle     - The <button> in the DOM that\n *                                          toggles the menu on mobile. NULL\n *                                          if this is a subnav.\n * @prop {String}              toggleText - The initial text of the mobile\n *                                          toggle (so we can reset it when\n *                                          the mobile nav is closed).\n * @prop {Array}               items      - Instances of NavItem that model\n *                                          each element in the nav\n */\nexport default class Nav {\n\n  /**\n   * Create a Nav\n   *\n   * @param {HTMLElement|NavItem} elem - The element that is the nav menu.\n   *                                     May be a main nav (<nav>) or a subnav\n   *                                     (NavItem).\n   */\n  constructor(elem) {\n    this.elem = elem;\n    this.topNav = this.getTopNav();\n    // If this is a subnav, we need the correpsonding HTMLElement for\n    // .querySelector()\n    if (elem instanceof NavItem) {\n      elem = elem.item;\n    }\n    this.toggle = elem.querySelector(elem.tagName + ' > button');\n    this.toggleText = this.toggle ? this.toggle.innerText : '';\n    this.items = [];\n    let items = elem.querySelectorAll(elem.tagName + ' > ul > li');\n    items.forEach(\n      item => {\n        this.items.push(new NavItem(item, this));\n      }\n    );\n\n    elem.addEventListener('keydown', this);\n\n    if (this.toggle) {\n      this.toggle.addEventListener('click', this);\n    }\n  }\n\n  // -------------------------------------------------------------------------\n  // Helper Methods.\n  // -------------------------------------------------------------------------\n\n  /**\n   * Get the instance of Nav that represents the top level nav of this\n   * instance.\n   *\n   * @return {Nav}\n   *  Returns the navigation instance.\n   */\n  getTopNav() {\n    let nav = this;\n    while (nav.elem instanceof NavItem) {\n      // If nav is the main nav, nav.elem will be an HTMLElement\n      // (the <nav> element).\n      // If nav.elem is a NavItem, then this is a subNav, so get the Nav that\n      // contains the NavItem.\n      nav = nav.elem.nav;\n    }\n    return nav;\n  }\n\n  /**\n   * Get the instance of Nav that represents the parent of this instance.\n   * If this is the top nav, return this so you can safely call methods on it.\n   *\n   * @return {Nav}\n   *   Returns the navigation instance.\n   */\n  getParentNav() {\n    return this.isSubNav() ? this.elem.nav : this;\n  }\n\n\n  /**\n   * Is this expanded?\n   * If this is a subnav, ask the subnav (NavItem) if it's expanded.\n   * Otherwise (this is the top nav), check aria-expanded.\n   *\n   * @return {Boolean}\n   *   Returns wether or not the item is expanded.\n   */\n  isExpanded() {\n    if (this.elem instanceof NavItem) {\n      return this.elem.isExpanded();\n    }\n\n    return this.elem.getAttribute('aria-expanded') === 'true';\n  }\n\n  /**\n   * Set whether or not this is expanded.\n   * If this is a subnav, let the subnav (NavItem) handled it.\n   * Otherwise (this is the top nav), set aria-expanded.\n   *\n   * @param {String} value - What to set the aria-expanded attribute of\n   *                         this's link to.\n   */\n  setExpanded(value) {\n    if (this.elem instanceof NavItem) {\n      this.elem.setExpanded(value);\n    }\n    else {\n      this.elem.setAttribute('aria-expanded', value);\n      if (this.toggle) {\n        this.toggle.setAttribute('aria-expanded', value);\n      }\n    }\n  }\n\n  /**\n   * Is this rendering the desktop style for the nav?\n   *\n   * @return {Boolean}\n   *  Returns wether or not it is desktop navigation.\n   */\n  isDesktopNav() {\n    return getComputedStyle(this.topNav.toggle).display === 'none';\n  }\n\n  /**\n   * Is this the top nav?\n   *\n   * @return {Boolean}\n   *  Returns wether or not it is the top nav item.\n   */\n  isTopNav() {\n    return this.topNav === this;\n  }\n\n  /**\n   * Is this a subnav?\n   *\n   * @return {Boolean}\n   *  Returns wether or not this is a subnav item.\n   */\n  isSubNav() {\n    return this.topNav !== this;\n  }\n\n  /**\n   * Get the first item in this nav.\n   *\n   * @return {NavItem}\n   *  Returns wether or not this is the first item.\n   */\n  getFirstItem() {\n    return this.items.length ? this.items[0] : null;\n  }\n\n  /**\n   * Get the last item in this nav.\n   *\n   * @return {NavItem}\n   *  Returns wether or not this is the last item.\n   */\n  getLastItem() {\n    return this.items.length ? this.items[this.items.length - 1] : null;\n  }\n\n  /**\n   * Get the link associated with the first item in this nav.\n   *\n   * @return {HTMLAnchorElement}\n   *  Returns the very first link.\n   */\n  getFirstLink() {\n    return this.items.length ? this.getFirstItem().link : null;\n  }\n\n  /**\n   * Get the link associated with the last item in this nav.\n   *\n   * @return {HTMLAnchorElement}\n   *  Returns the very last link.\n   */\n  getLastLink() {\n    return this.items.length ? this.getLastItem().link : null;\n  }\n\n  // -------------------------------------------------------------------------\n  // Functional methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Set the focus on the specified link in this nav.\n   *\n   * @param {String|Number} link - 'first' | 'last' | 'next'\n   *                                | 'prev' | numerical index\n   * @param {NavItem} currentItem - If link is 'next' or 'prev', currentItem\n   *                                is the NavItem that next / prev is\n   *                                relative to.\n   */\n  focusOn(link, currentItem = null) {\n    var currentIndex = null;\n    var lastIndex = null;\n    if (currentItem) {\n      currentIndex = this.items.indexOf(currentItem);\n      lastIndex = this.items.length - 1;\n    }\n    switch (link) {\n      case 'first':\n        this.getFirstLink().focus();\n        break;\n\n      case 'last':\n        this.getLastLink().focus();\n        break;\n\n      case 'next':\n        if (currentIndex === lastIndex) {\n          this.getFirstLink().focus();\n        }\n        else {\n          this.items[currentIndex + 1].link.focus();\n        }\n        break;\n\n      case 'prev':\n        if (currentIndex === 0) {\n          this.getLastLink().focus();\n        }\n        else {\n          this.items[currentIndex - 1].link.focus();\n        }\n        break;\n\n      default:\n        if (Number.isInteger(link) && link >= 0 && link < this.items.length) {\n          this.items[link].link.focus();\n        }\n        break;\n    }\n  }\n\n  /**\n   * Close any mobile navs that might be open, then mark this mobile nav open.\n   * Optionally force focus on the first element in the nav (for keyboard nav)\n   *\n   * @param {Boolean} focusOnFirst - Whether or not to also focus on the\n   *                                 first element in the subnav.\n   */\n  openMobileNav(focusOnFirst = true) {\n    closeAllMobileNavs();\n\n    this.setExpanded('true');\n    this.toggle.innerText = 'Close';\n    if (focusOnFirst) {\n      this.focusOn('first'); // Focus on the first top level link\n    }\n  }\n\n  /**\n   * Mark this mobile closed, and restore the button text to what it was\n   * initially.\n   */\n  closeMobileNav() {\n    this.setExpanded('false');\n    this.toggle.innerText = this.toggleText;\n  }\n\n  // -------------------------------------------------------------------------\n  // Event handlers\n  // -------------------------------------------------------------------------\n\n  /**\n   * Handler for all events attached to an instance of this class. This method\n   * must exist when events are bound to an instance of a class\n   * (vs a function). This method is called for all events bound to an\n   * instance. It inspects the instance (this) for an appropriate handler\n   * based on the event type. If found, it dispatches the event to the\n   * appropriate handler.\n   *\n   * @param {KeyboardEvent} event - The keyboard event object.\n   *\n   * @return {*}\n   *  Whatever the dispatched handler returns (in our case nothing)\n   */\n  handleEvent(event) {\n    event = event || window.event;\n    // If this class has an onEvent method, e.g. onClick, onKeydown,\n    // invoke it.\n    const handler = 'on'\n      + event.type.charAt(0).toUpperCase()\n      + event.type.slice(1);\n\n    if (typeof this[handler] === 'function') {\n      // The element that was clicked.\n      const target = event.target || event.srcElement;\n      return this[handler](event, target);\n    }\n  }\n\n  /**\n   * Handler for click events. click is only bound to the mobile toggle.\n   * Dispatched from this.handleEvent().\n   *\n   * @param {KeyboardEvent} event   - The keyboard event object.\n   * @param {HTMLElement}   target  - The HTML Element target object.\n   */\n  onClick(event, target) {\n    if (target === this.toggle) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.isExpanded()) {\n        this.closeMobileNav();\n      }\n      else {\n        this.openMobileNav(false);\n      }\n    }\n  }\n\n  /**\n   * Handler for keydown events. keydown is bound to all Nav's.\n   * Dispatched from this.handleEvent().\n   *\n   * @param {KeyboardEvent} event   - The keyboard event object.\n   * @param {HTMLElement}   target  - The HTML Element target object.\n   */\n  onKeydown(event, target) {\n    const theKey = event.key || event.keyCode;\n\n    if (isEsc(theKey)) {\n      if (this.isTopNav()) {\n        if (!this.isDesktopNav()) {\n          event.preventDefault();\n          event.stopPropagation();\n          this.closeMobileNav();\n          this.toggle.focus();\n        }\n      }\n      else {\n        if (this.isExpanded()) {\n          event.preventDefault();\n          event.stopPropagation();\n          this.elem.closeSubNav(true);\n        }\n      }\n    }\n    else if (isEnter(theKey) || isSpace(theKey)) {\n      if (target === this.toggle) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (!this.isExpanded()) {\n          this.openMobileNav();\n        }\n      }\n    }\n  }\n\n}\n","import { theNavs, theSubNavs, closeAllSubNavs, closeAllMobileNavs } from './globals.js';\nimport { isHome, isEnd, isTab, isEsc, isSpace, isEnter, isLeftArrow, isRightArrow, isUpArrow, isDownArrow } from \"../../utilities/keyboard.js\";\nimport Nav from './Nav';\n\n/**\n * Represent an item in a navigation menu. May be a direct link or a subnav\n * trigger.\n *\n * @prop {HTMLLIElement}   item   - the <li> in the DOM that is the NavItem\n * @prop {HTMLElement|Nav} nav    - the Nav that contains the element.\n *                                  May be a main nav (<nav>) or subnav (Nav).\n * @prop {HTMLLIElement}   link   - the <a> in the DOM that is contained in\n *                                  item (the <li>).\n * @prop {Nav}             subNav - if item is the trigger for a subnav, this\n *                                  is an instonce Nav that models the subnav.\n */\nexport default class NavItem {\n\n  /**\n   * Create a NavItem\n   * @param {HTMLLIElement}   item  - The <li> that is the NavItem in the DOM.\n   * @param {HTMLElement|Nav} nav   - The Nav that contains the element. May\n   *                                  be a main nav (<nav>) or a subnav (Nav).\n   */\n  constructor(item, nav) {\n    this.item = item;\n    this.nav = nav;\n    this.link = this.item.querySelector('a');\n    this.subNav = null;\n    this.item.addEventListener('keydown', this);\n\n    if (this.isSubNavTrigger()) {\n      this.subNav = new Nav(this);\n      // Maintain global list of subnavs for closeAllSubNavs().\n      theSubNavs.push(this);\n      this.item.addEventListener('click', this);\n    }\n  }\n\n  // -------------------------------------------------------------------------\n  // Helper Methods.\n  // -------------------------------------------------------------------------\n\n  /**\n   * Is this the first item in the containing Nav?\n   *\n   * @return {Boolean}\n   *  Wether or not the item is the first item.\n   */\n  isFirstItem() {\n    return this.nav.items.indexOf(this) === 0;\n  }\n\n  /**\n   * Is this the last item in the containing Nav?\n   *\n   * @return {Boolean}\n   *  Wether or not the item is the last item.\n   */\n  isLastItem() {\n    return this.nav.items.indexOf(this) === (this.nav.items.length - 1);\n  }\n\n  /**\n   * Is this a trigger that opens / closes a subnav?\n   *\n   * @return {Boolean}\n   *  Wether or not the item is the sub nav trigger item.\n   */\n  isSubNavTrigger() {\n    return this.item.lastElementChild.tagName.toUpperCase() === 'UL';\n  }\n\n  /**\n   * Is this a component of a subnav - either the trigger or a nav item?\n   *\n   * @return {Boolean}\n   *  Wether or not the item is a subnav item.\n   */\n  isSubNavItem() {\n    return (this.isSubNavTrigger() || this.nav.isSubNav());\n  }\n\n  /**\n   * Is this expanded? Can only return TRUE if this is a subnav trigger.\n   *\n   * @return {Boolean}\n   *  Wether or not the item is expanded.\n   */\n  isExpanded() {\n    return this.link.getAttribute('aria-expanded') === 'true';\n  }\n\n  /**\n   * Set whether or not this is expanded.\n   * Only meaningful if this is a subnav trigger.\n   *\n   * @param {String} value - What to set the aria-expanded attribute of this's\n   *                         link to.\n   */\n  setExpanded(value) {\n    this.link.setAttribute('aria-expanded', value);\n  }\n\n  // -------------------------------------------------------------------------\n  // Functional Methods.\n  // -------------------------------------------------------------------------\n\n  /**\n   * Handles the opening of a sub-nav.\n   *\n   * If this is a subnav trigger, open the corresponding subnav.\n   * Optionally force focus on the first element in the subnav\n   * (for keyboard nav).\n   *\n   * @param {Boolean} focusOnFirst - whether or not to also focus on the first\n   *                                 element in the subnav\n   */\n  openSubNav(focusOnFirst = true) {\n    closeAllSubNavs();\n\n    if (this.isSubNavTrigger()) {\n      this.item.classList.add('su-main-nav__item--expanded');\n      this.setExpanded('true');\n      if (focusOnFirst) {\n        this.subNav.focusOn('first');\n      }\n    }\n  }\n\n  /**\n   * Handles the closing of a subnav.\n   *\n   * If this is a subnav trigger or an item in a subnav, close the\n   * corresponding subnav. Optionally force focus on the trigger.\n   *\n   * @param {Boolean} focusOnTrigger - Whether or not to also focus on the\n   *                                 subnav's trigger.\n   */\n  closeSubNav(focusOnTrigger = false) {\n    if (this.isSubNavTrigger()) {\n      this.item.classList.remove('su-main-nav__item--expanded');\n      this.setExpanded('false');\n      if (focusOnTrigger) {\n        this.link.focus();\n      }\n    }\n    else if (this.isSubNavItem()) {\n      // This.nav.elem should be a subNavTrigger.\n      this.nav.elem.closeSubNav(focusOnTrigger);\n    }\n  }\n\n  // -------------------------------------------------------------------------\n  // Event Handlers.\n  // -------------------------------------------------------------------------\n\n  /**\n   * Handler for all events attached to an instance of this class. This method\n   * must exist when events are bound to an instance of a class\n   * (vs a function). This method is called for all events bound to an\n   * instance. It inspects the instance (this) for an appropriate handler\n   * based on the event type. If found, it dispatches the event to the\n   * appropriate handler.\n   *\n   * @param {KeyboardEvent} event - The keyboard event.\n   *\n   * @return {*}\n   *   Whatever the dispatched handler returns (in our case nothing)\n   */\n  handleEvent(event) {\n    event = event || window.event;\n\n    // If this class has an onEvent method (onClick, onKeydown) invoke it.\n    const handler = 'on'\n      + event.type.charAt(0).toUpperCase()\n      + event.type.slice(1);\n\n    if (typeof this[handler] === 'function') {\n      // The element that was clicked.\n      const target = event.target || event.srcElement;\n      return this[handler](event, target);\n    }\n  }\n\n  /**\n   * Handler for keydown events. keydown is bound to all NavItem's.\n   * Dispatched from this.handleEvent().\n   *\n   * @param {KeyboardEvent} event - The keyboard event object.\n   * @param {HTMLElement} target  - The HTML element target.\n   */\n  onKeydown(event, target) {\n    const theKey = event.key || event.keyCode;\n\n    // Handler for the space and enter key.\n    if (isSpace(theKey) || isEnter(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.isSubNavTrigger()) {\n        this.openSubNav();\n      }\n      else {\n        window.location = this.link;\n      }\n    }\n    // Handler for the down arrow key.\n    else if (isDownArrow(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.nav.isDesktopNav()) {\n        if (this.isSubNavTrigger()) {\n          this.openSubNav();\n        }\n        else {\n          this.nav.focusOn('next', this);\n        }\n      }\n      else {\n        this.nav.focusOn('next', this);\n      }\n    }\n    // Handler for the up arrow key.\n    else if (isUpArrow(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.nav.focusOn('prev', this);\n    }\n    // Handler for the left arrow key.\n    else if (isLeftArrow(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.nav.isDesktopNav()) {\n        if (this.nav.isSubNav()) {\n          this.closeSubNav();\n          let parent = this.nav.getParentNav();\n          // Focus on the previous item in the parent nav.\n          parent.focusOn('prev', this.nav.elem);\n        }\n        else {\n          this.nav.focusOn('prev', this);\n        }\n      }\n      else {\n        if (this.isSubNavItem()) {\n          // Close the subnav and put the focus on the trigger.\n          this.closeSubNav(true);\n        }\n      }\n    }\n    // Handler for the right arrow key.\n    else if (isRightArrow(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.nav.isDesktopNav()) {\n        if (this.nav.isSubNav()) {\n          this.closeSubNav();\n          let parent = this.nav.getParentNav();\n          // Focus on the next item in the parent nav.\n          parent.focusOn('next', this.nav.elem);\n        }\n        else {\n          this.nav.focusOn('next', this);\n        }\n      }\n      else {\n        if (this.isSubNavTrigger()) {\n          this.openSubNav();\n        }\n      }\n    }\n    // Handler for the home key.\n    else if (isHome(theKey)) {\n      this.nav.focusOn('first');\n    }\n    // Handler for the end key.\n    else if (isEnd(theKey)) {\n      this.nav.focusOn('last');\n    }\n    // Handler for the tab key.\n    else if (isTab(theKey)) {\n      event.stopPropagation();\n      const shifted = event.shiftKey;\n      if (this.isSubNavItem()\n        && ((!shifted && this.isLastItem())\n          || (shifted && this.isFirstItem()))\n      ) {\n        this.closeSubNav(true);\n      }\n    }\n  }\n\n  /**\n   * Handler for click events.\n   *\n   * Dispatched from this.handleEvent().\n   * Click is only bound to subnav triggers. However, click bubbles up from\n   * subnav items to the trigger.\n   *\n   * @param {KeyboardEvent} event - The keyboard event object.\n   * @param {HTMLElement} target  - The HTML element target.\n   */\n  onClick(event, target) {\n    if (this.isExpanded()) {\n      this.closeSubNav();\n    }\n    else {\n      this.openSubNav(false);\n    }\n    // If the click is directly on the trigger, then we're done.\n    if (target === this.link) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n}\n","// ---------------------------------------------------------------------------\n// Global variables and functions shared amongst the nav code\n// ---------------------------------------------------------------------------\n\n// Variables\n\n/**\n *  Global record of all main navs on the page\n *  - populated in the document.ready function in main-nav.js\n *  - used by closeAllMobileNavs\n * @type {Array}\n */\nexport var theNavs = [];\n\n/**\n *  Global record of all sub navs on the page (may be in different main navs\n *  - populated by the NavItem constructor\n *  - used by closeAllSubNavs\n * @type {Array}\n */\nexport var theSubNavs = [];\n\n// Functions\n\n/**\n * Close all subnavs on the page\n */\nexport const closeAllSubNavs = () => {\n  theSubNavs.forEach(\n    subNav => { subNav.closeSubNav(); }\n  );\n};\n\n/**\n * Close all mobile navs on the page\n */\nexport const closeAllMobileNavs = () => {\n  theNavs.forEach(\n    theNav => { theNav.closeMobileNav(); }\n  );\n};\n","import '../../core/core';\nimport { theNavs, theSubNavs, closeAllSubNavs, closeAllMobileNavs } from './globals';\nimport Nav from './Nav';\n\ndocument.addEventListener('DOMContentLoaded', event => {\n\n  // The css class that this following behaviour is applied to.\n  const navClass = 'su-main-nav';\n\n  // Variables.\n\n  // All main navs.\n  const navs = document.querySelectorAll('.' + navClass);\n\n  // ---------------------------------------------------------------------------\n  // Execution Code.\n  // ---------------------------------------------------------------------------\n\n  // Process each nav.\n  let firstZindex;\n  navs.forEach((nav, index) => {\n    const theNav = new Nav(nav);\n    theNavs.push(theNav);\n\n    if (index === 0) {\n      firstZindex = getComputedStyle(nav, null).zIndex;\n    }\n    else {\n      nav.style.zIndex = firstZindex - 300 * index;\n    }\n  }); // navs.forEach\n\n  // Clicking anywhere outside a nav closes all navs.\n  document.addEventListener('click', event => {\n    // The element that was clicked.\n    const target = event.target || event.srcElement;\n    // If target is not under a main nav close all navs.\n    if (!target.matches('.' + navClass + ' ' + target.tagName)) {\n      closeAllSubNavs();\n      closeAllMobileNavs();\n    }\n  }, false);\n\n}); // on DOMContentLoaded.\n","// if NodeList doesn't support forEach, use Array's forEach()\nNodeList.prototype.forEach = NodeList.prototype.forEach || Array.prototype.forEach;\n","/**\n * Webpack Entry File.\n */\n\nimport * as DecanterCore from './core/core.js';\nimport * as DecanterUtilsKeyboard from './utilities/keyboard.js';\nimport * as Decanter from './components/components.js';\n","// ---------------------------------------------------------------------------\n// Keyboard helper functions\n// ---------------------------------------------------------------------------\n\nexport const isHome = theKey => (theKey === 'Home' || theKey === 122);\nexport const isEnd = theKey => (theKey === 'End' || theKey === 123);\nexport const isTab = theKey => (theKey === 'Tab' || theKey === 9);\nexport const isEsc = theKey => (theKey === 'Escape' || theKey === 'Esc' || theKey === 27);\nexport const isSpace = theKey => (theKey === ' ' || theKey === 'Spacebar' || theKey === 32);\nexport const isEnter = theKey => (theKey === 'Enter' || theKey === 13);\nexport const isLeftArrow = theKey => (theKey === 'ArrowLeft' || theKey === 'Left' || theKey === 37);\nexport const isRightArrow = theKey => (theKey === 'ArrowRight' || theKey === 'Right' || theKey === 39);\nexport const isUpArrow = theKey => (theKey === 'ArrowUp' || theKey === 'Up' || theKey === 38);\nexport const isDownArrow = theKey => (theKey === 'ArrowDown' || theKey === 'Down' || theKey === 40);\n"],"sourceRoot":""}